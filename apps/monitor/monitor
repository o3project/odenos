#!/usr/bin/env python3.4

# Copyright 2015 NEC Corporation.                                          #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License");          #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#   http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #

import sys
import msgpack
from io import BytesIO
import traceback
from copy import copy
import json
import yaml
import argparse

import tornado.httpserver
import tornado.websocket
import tornado.ioloop
import tornado.web
import tornado.gen
import tornadoredis
from tornadoredis.exceptions import ResponseError

gen = tornado.gen
@tornado.gen.engine
def _consume_bulk(self, tail, callback=None):
    response = yield gen.Task(self.connection.read, int(tail) + 2)
    if isinstance(response, Exception):
        raise response
    if not response:
        raise ResponseError('EmptyResponse')
    else:
        #response = to_unicode(response)
        response = response[:-2]
        callback(response)
tornadoredis.client.Client._consume_bulk = _consume_bulk

def _decode_list(data):
    decode = []
    for item in data:
        if isinstance(item, bytes):
            try:
                item = item.decode('utf-8')
            except:
                item = '<byte array>'
        elif isinstance(item, list):
            item = _decode_list(item)
        elif isinstance(item, dict):
            item = _decode_dict(item)
        decode.append(item)
    return decode 

def _decode_dict(data):
    decode = {}
    for key, value in iter(data.items()):
        if isinstance(key, bytes):
            try:
                key = key.decode('utf-8')
            except:
                key = '<byte array>'
        if isinstance(value, bytes):
            try:
                value = value.decode('utf-8')
            except:
                value = '<byte array>'
        elif isinstance(value, list):
            value = _decode_list(value)
        elif isinstance(value, dict):
            value = _decode_dict(value)
        decode[key] = value
    return decode

def decode(data):
    '''
    Converts bytes into 'utf-8'.
    '''
    if isinstance(data, dict):
        return _decode_dict(data)
    elif isinstance(data, list):
        return _decode_list(data)
    elif isinstance(data, bytes):
        return data.decode('utf-8')
    else:
        return data


class Monitor:
    """
    Generates a message sequence diagram by tapping Redis server.
    """

    REQUEST = 'REQUEST' 
    RESPONSE = 'RESPONSE'
    EVENT = 'EVENT' 

    GET_RIGHT =     '----- GET ---->'
    GET_LEFT =      '<---- GET -----'
    POST_RIGHT =    '----- POST --->'
    POST_LEFT =     '<--- POST -----'
    PUT_RIGHT =     '----- PUT ---->'
    PUT_LEFT =      '<---- PUT -----'
    DELETE_RIGHT =  '---- DELETE -->'
    DELETE_LEFT =   '<-- DELETE ----'
    RESPONSE_RIGHT =    '----- {} ---->'
    RESPONSE_LEFT =     '<---- {} -----'
    EVENT_RIGHT =       '---- EVENT --->'
    EVENT_LEFT =        '<--- EVENT ----'
    BAR =         '---------------'  
    EMPTY =       '               '  
    REQUEST_LEFT = {'GET': GET_LEFT,  'POST': POST_LEFT, 'PUT': PUT_LEFT, 'DELETE': DELETE_LEFT}
    REQUEST_RIGHT = {'GET': GET_RIGHT, 'POST': POST_RIGHT, 'PUT': PUT_RIGHT, 'DELETE': DELETE_RIGHT}

    SUMMARY_REQUEST = '{}  {} {}'
    SUMMARY_RESPONSE = '{}  {} {} {}'
    SUMMARY_EVENT = '{} {}'
    SUMMARY_FORMAT = {REQUEST: SUMMARY_REQUEST, RESPONSE: SUMMARY_RESPONSE, EVENT: SUMMARY_EVENT}

    REASON = {200: 'OK', 201: 'Created', 202: 'Accepted', 204: 'No content', 400: 'Bad request', 403: 'Forbidden', 404: 'Not found', 405: 'Method not allowed', 409: 'Conflict'}
    HEADER_PER_LINES = 30

    DEFAULT_ICON = 'Default.png'

    def __init__(self, object_ids=[], output=print, hyperlink=False, message_buffer=[], detail_output=False, json_format=False):

        self.object_ids = object_ids
        self.output = output
        self.hyperlink = hyperlink
        self.message_buffer = message_buffer
        self.detail_output = detail_output
        self.json_format = json_format

        self.serial = 0
        self.output_count = 0 
        if output == print and detail_output == True:
            self.output_count_reset = 1 
        else:
            self.output_count_reset = Monitor.HEADER_PER_LINES 

        object_number = len(self.object_ids)
        c = 0
        cc = 0
        self.header_format = ''
        self.arrow_default = [] 
        self.vertical_lines_format = '       ' 

        for count in range(object_number):
            self.header_format += '{:^16}'  
            c += 1
            if count < object_number - 1:
                self.vertical_lines_format += '{}{:<15}'
                self.arrow_default.append('|')
                self.arrow_default.append(Monitor.EMPTY)
            else:
                self.vertical_lines_format += '{}'
                self.arrow_default.append('|')
            cc += 2

    def on_message(self, msg):
        '''
        Packet format
        -------------
        Type: REQUEST 
        - message_type: REQUEST
        - dstid (or subscriber ID): string
        - srcid (or publisher ID): string
        - sno: integer
        - method: string 
        - path: string
        - body: JSON or text

        Type: RESPONSE
        - message_type: RESPONE
        - dstid (or publisher ID): string
        - srcid (or subscriber ID): string
        - sno: integer
        - status: integer
        - body: JSON or text

        Type: EVENT
        - message_type: EVENT
        - dstid (subscriber ID): string
        - srcid (publisher ID): string
        - event_type: string
        - body: JSON or text


        '''
        #print(msg)
        if self.output_count <= 0 and self.output == print:
            self.output(self.header_format.format(*self.object_ids))
            self.output_count = self.output_count_reset 
        bio = BytesIO()
        bio.write(msg.body)
        bio.seek(0)
        upk = msgpack.Unpacker(bio)
        message_type = upk.unpack().decode('utf-8') # Message type
        dstid = upk.unpack().decode('utf-8')
        srcid = upk.unpack().decode('utf-8')
        try:
            if message_type == Monitor.REQUEST:
                sno = upk.unpack()  # Serial number for a pair of Request/Response
                method = upk.unpack().decode('utf-8')
                path = upk.unpack().decode('utf-8')
                body = upk.unpack()
                self.message_buffer.append(body)
                self._write_sequence(self.serial, message_type, dstid, srcid, sno, method, path, None, None, body)
                self.serial += 1
            elif message_type == Monitor.RESPONSE:
                sno = upk.unpack()  # Serial number for a pair of Request/Response
                status = upk.unpack()
                body = upk.unpack()
                self.message_buffer.append(body)
                self._write_sequence(self.serial, message_type, dstid, srcid, sno, None, None, status, None, body)
                self.serial += 1
            elif message_type == Monitor.EVENT:
                event_type = upk.unpack().decode('utf-8')
                body = upk.unpack()
                self.message_buffer.append(body)
                self._write_sequence(self.serial, message_type, dstid, srcid, -1, None, None, None, event_type, body)
                self.serial += 1
        except:
            traceback.print_exc()

    def _write_sequence(self, serial, message_type, dstid, srcid, sno, method, path, status, event_type, body):
        '''
        Writes sequence
        '''
        object_number = len(self.object_ids)
        
        dstid_idx = -1 
        srcid_idx = -1

        if dstid in self.object_ids:
            dstid_idx = self.object_ids.index(dstid)
        if srcid in self.object_ids:
            srcid_idx = self.object_ids.index(srcid)

        if (dstid_idx < 0) or (srcid_idx < 0):
            pass
        else:

            arrow = copy(self.arrow_default)

            left = None
            right = None
            result_OK = True 
            if message_type == Monitor.REQUEST:
                left = Monitor.REQUEST_LEFT[method]
                right = Monitor.REQUEST_RIGHT[method]
            elif message_type == Monitor.RESPONSE:
                left = Monitor.RESPONSE_LEFT.format(status)
                right = Monitor.RESPONSE_RIGHT.format(status)
            elif message_type == Monitor.EVENT:
                left = Monitor.EVENT_LEFT
                right = Monitor.EVENT_RIGHT

            if (dstid_idx > srcid_idx):  # Drows an arrow to the right
                c = srcid_idx
                for count in range(srcid_idx, dstid_idx):
                    C = c * 2
                    if c == srcid_idx and dstid_idx - srcid_idx > 1:
                        arrow[C+1] = Monitor.BAR
                    elif c == srcid_idx and dstid_idx - srcid_idx == 1:
                        arrow[C+1] = right
                    elif c == dstid_idx - 1:
                        arrow[C] = '-'
                        arrow[C+1] = right 
                        break
                    else:
                        arrow[C] = '-' 
                        arrow[C+1] = Monitor.BAR 
                    c += 1 
            else:  # Draws an arrow to the left
                c = dstid_idx
                for count in range(dstid_idx, srcid_idx):
                    C = c * 2
                    if c == dstid_idx:
                        arrow[C+1] = left
                    elif c == srcid_idx:
                        arrow[C] = '-'
                        arrow[C+1] = Monitor.BAR 
                        break
                    else:
                        arrow[C] = '-'
                        arrow[C+1] = Monitor.BAR 
                    c += 1 

            final_format = None
            if message_type == Monitor.REQUEST:
                arrow.append(sno)
                arrow.append(path)
            elif message_type == Monitor.RESPONSE:
                arrow.append(sno)
                reason = ''
                if status in Monitor.REASON:
                    reason = Monitor.REASON[status]
                arrow.append(status)
                arrow.append(reason)
                if int(status/100) != 2:
                    result_OK = False 
            elif (message_type == Monitor.EVENT):
                arrow.append(event_type)
            final_format = self.vertical_lines_format+'  '+Monitor.SUMMARY_FORMAT[message_type]

            if self.hyperlink:
                arrow.append(',{},{}'.format(self.serial, result_OK))
            else:
                arrow.append('')
            self.output(final_format.format(*arrow))
            if self.detail_output:
                self.output('dstid: {}'.format(dstid))
                self.output('srcid: {}'.format(srcid))
                if self.json_format:
                    self.output(json.dumps(decode(self.message_buffer[serial])))
                else:
                    self.output(yaml.dump(decode(self.message_buffer[serial]), default_flow_style=False))
                self.output('')
            self.output_count -= 1


class MessageHandler(tornado.websocket.WebSocketHandler):

    def initialize(self, host, port, object_ids, message_buffer):

        self.host = host
        self.port = port

        self.monitor = Monitor(object_ids=object_ids, output=self.write_message, hyperlink=True, message_buffer=message_buffer)

    def open(self):
        self.listen()

    @tornado.gen.engine
    def listen(self):
        self.client = tornadoredis.Client(host=self.host, port=self.port)
        self.client.connect()
        yield tornado.gen.Task(self.client.subscribe, '_monitor')
        self.client.listen(self.on_redis_message)

    # TODO: security check
    def check_origin(self, origin):
        return True

    def on_redis_message(self, msg):
        #if msg.kind == b'pmessage':
        if msg.kind == b'message':
            self.monitor.on_message(msg)
        elif msg.kind == b'disconnect':
            self.close()

    def on_close(self):
        if self.client.subscribed:
            self.client.punsubscribe('*')
            self.client.disconnect()

class DetailHandler(tornado.web.RequestHandler):

    def initialize(self, message_buffer, json_format):
        self.message_buffer = message_buffer
        self.json_format = json_format;

    def get(self):
        serial = int(self.get_argument('serial'))
        if self.json_format:
            self.write(json.dumps(decode(self.message_buffer[serial])))
        else:
            self.write(yaml.dump(decode(self.message_buffer[serial])))

class PageHandler(tornado.web.RequestHandler):
    '''
    Renders index.html template with input arguments 
    '''

    def initialize(self, webhost, webport, object_ids, images, title):
        self.webhost = webhost
        self.webport = webport
        self.title = title
        td_text_format = ''
        td_img_format = ''
        img_data = []
        len_images = len(images)
        if len_images == 0:
            img_data = ['/web/images/{}'.format(Monitor.DEFAULT_ICON) for i in range(len(object_ids))]
        for count in range(len(object_ids)):
            if len_images > 0:
                img_data.append('/web/images/{}'.format(images[count]))
            td_text_format += '<td><pre>{:^16}</pre></td>'  
            td_img_format += '<td><img src={}></img></td>'
        tr_text = td_text_format.format(*object_ids)
        tr_img = td_img_format.format(*img_data)
        table = '<table><tr>{}</tr><tr>{}</tr></table>'.format(tr_img, tr_text)
        self.object_ids = table 

    def get(self):
        self.render('web/index.html', host=self.webhost, port=self.webport, object_ids=self.object_ids, title=self.title)

class ConsoleOutput(object):
    ''' 
    TODO: message retrieval
    ''' 

    def __init__(self, host, port, object_ids, message_buffer, detail_output=False, json_format=False):

        self.host = host
        self.port = port
        self.monitor = Monitor(object_ids=object_ids, output=print, hyperlink=False, message_buffer=message_buffer, detail_output=detail_output, json_format=json_format)
        self.listen()

    @tornado.gen.engine
    def listen(self):
        self.client = tornadoredis.Client(host=self.host, port=self.port)
        self.client.connect()
        yield tornado.gen.Task(self.client.subscribe, '_monitor')
        self.client.listen(self.on_redis_message)

    def on_redis_message(self, msg):
        if msg.kind == b'message':
            self.monitor.on_message(msg)
        elif msg.kind == b'disconnect':
            self.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("object_ids", help="a list of object IDs", nargs='*', type=str)
    parser.add_argument("-i", "--host", help="Redis server host name or IP address", type=str, default='localhost')
    parser.add_argument("-p", "--port", help="Redis server port number", type=int, default=6379)
    parser.add_argument("-I", "--webhost", help="HTTP server host name or IP address", type=str, default="localhost")
    parser.add_argument("-P", "--webport", help="HTTP server port number", type=int, default=8888)
    parser.add_argument("-c", "--console", help="output to console", action="store_true", default=False)
    parser.add_argument("-d", "--detail", help="message detail output to console", action="store_true", default=False)
    parser.add_argument("-j", "--json", help="message detail output in JSON rather than YAML", action="store_true", default=False)
    parser.add_argument("-f", "--file", help="preset file name", type=str, default="default.yaml")
    parser.add_argument("-t", "--title", help="title", type=str, default="ODENOS message sequence diagram")
    args = parser.parse_args()
    if args.console:
        print('Console output mode')
    else:
        print('Open "http://{}:{}/index.html" with your browser! (firefox is recommended)'.format(args.webhost, args.webport))
    images = []
    if not args.object_ids:
        default = yaml.load(open(args.file))
        object_ids = []
        for object_id in default['object_ids']:
            data = object_id.split(':')
            object_ids.append(data[0])
            images.append(data[1])
        args.object_ids = object_ids
    else:
        for object_id in args.object_ids:
            images.append(Monitor.DEFAULT_ICON)
    print('object IDs: {}'.format(args.object_ids))
    print('Ctrl-C to exit')
    print('')
    message_buffer = []  # A common buffer shared by Tornado handlers
    if args.console:
        console_output = ConsoleOutput(host=args.host, port=args.port, object_ids=args.object_ids, message_buffer=message_buffer, detail_output=args.detail, json_format=args.json)
    else:
        application = tornado.web.Application([
            (r'/index.html', PageHandler, dict(webhost=args.webhost, webport=args.webport, object_ids=args.object_ids, images=images, title=args.title)),
            (r'/message', MessageHandler, dict(host=args.host, port=args.port, object_ids=args.object_ids, message_buffer=message_buffer)),
            (r'/detail', DetailHandler, dict(message_buffer=message_buffer, json_format=args.json)),
            (r'/web/(.*)', tornado.web.StaticFileHandler, dict(path='web/'))
        ],
        autoescape=None)
        http_server = tornado.httpserver.HTTPServer(application)
        http_server.listen(args.webport, address=args.webhost)
    try:
        tornado.ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
        print('')
        print('bye!')
        sys.exit(0)

