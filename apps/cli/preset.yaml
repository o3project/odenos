#
# PRESET FILE FOR ODENOS 
# 
# 1. [PRODUCER]=>[FILTER]=>[TRANSFORM]=>REST Transacion with OdenOS
# 2. MACRO
# 

# === GENERATOR DECLARATIONS ===

# Generate a ring topology
- producer: topo_ring
  class: Topology
  topo_type: ring
  networks: 1
  nodes: 10 
  eports: 10 # The number of unconnected ports

# Generate a mesh topology
- producer: topo_mesh
  class: Topology
  topo_type: mesh 
  networks: 1
  nodes: 10 
  eports: 10 # The number of unconnected ports

# Generate a linear topology
- producer: topo_linear
  class: Topology
  topo_type: linear
  networks: 1
  nodes: 10 
  eports: 10 

# Generate a fat-tree topology
- producer: topo_fat_tree
  class: Topology
  topo_type: fat_tree 
  networks: 1

# === FILTER DECLARATIONS ===

# nodes
- filter: nodes 
  path: /node(\d+)/attributes/physical_id/
  value: \d+

# ports 
- filter: ports 
  path: /node(\d+)/ports/port(\d+)/attributes/physical_id/
  value: \d+@\d+

# links
- filter: links
  path: /link(0+\d+).(0+\d+)/link_id/
  value: link\d+

# flows
- filter: flows
  path: /priority/(.*)/.*/
  value: lsw_\d+

# components
- filter: comps
  path: /(.*)/type/
  value: .*

# connections
- filter: conns
  path: /(.*)/network_id/
  value: .*

# === FANCY_OUTPUT DECLARATIONS ===

- fancy: fancy_comp
  header:
    - "          COMPONENTS LIST          "
    - "       Type              ID        " 
    - "-----------------------------------"
  format: "{1:<17} {0:<17}"

- fancy: fancy_conn
  header:
    - "         CONNECTIONS LIST          "
    - "      Network            ID        " 
    - "-----------------------------------"
  format: "{1:<17} {0:<17}"

# === TRANSFORM DECLARATIONS ===

- transform: create_node 
  put: "/network{0}/topology/nodes/node{1}" 
  body:
    node_id: "node{1}"
    type: Node
    version: "0"
    ports: {}
    attributes: {"oper_status":"UP", "physical_id":"{1}", "vendor":"VENDOR_A"}

- transform: show_node 
  get: "/network1/topology/nodes/node{0}" 

- transform: delete_node
  delete: "/network1/topology/nodes/node{0}" 

- transform: create_port
  put: "/network{0}/topology/nodes/node{1}/ports/port{2}"
  body:
    type: Port
    version: "0"
    node_id: "node{1}"
    port_id: "port{2}"
    out_link: null
    in_link: null
    attributes:
      physical_id: "{2}@{1}"
      attr{2}: value{2}

- transform: delete_port
  delete: "/network1/topology/nodes/node{0}/ports/port{1}" 

- transform: create_link
  put: "/network{0}/topology/links/link{1}.{2}"
  body:
    type: Link
    version: "0"
    link_id: "link{1}.{2}"
    src_node: "node{1}"
    src_port: "port{2}"
    dst_node: "node{2}"
    dst_port: "port{1}"
    attributes:
      attr{2}: value{2}

- transform: delete_link
  delete: "/network1/topology/links/link{0}.{1}"

- transform: delete_flow
  delete: "/network1/flows/{1}"

- transform: create_federation
  put: /fed/settings/boundaries/federator_boundary{0}
  body:
    id: federator_boundary{0}
    type: Federator
    network1: network{0}
    node1: node{1}
    port1: port{2}
    network2: network{3}
    node2: node{4}
    port2: port{5} 

- transform: delete_component
  delete: /systemmanager/components/{0} 

- transform: delete_connection
  delete: /systemmanager/connections/{0} 

# === MACRO DECLARATIONS ===

# OdenOS base configuration
- macro: create_comp
  scenario:
    - put: /systemmanager/components/lsw
      body:
        type: LearningSwitch
        id: lsw
        cm_id: romgr1 
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/network0
      body:
        type: Network
        id: network0
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/network1
      body:
        type: Network
        id: network1
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/gen
      body:
        type: Generator 
        id: gen
        cm_id: romgr1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/components/aggre
      body:
        type: Aggregator
        id: aggre
        cm_id: romgr1
    - assert:
        status: 2\d{2}

- macro: create_conn
  scenario:
    - put: /systemmanager/connections/lsw
      body:
        id: lsw
        type: LogicAndNetwork
        connection_type: lsw_conn
        logic_id: lsw
        network_id: network0
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/aggre_network0
      body:
        id: aggre_network0
        type: LogicAndNetwork
        connection_type: aggregated
        logic_id: aggre 
        network_id: network0
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/gen
      body:
        id: gen 
        type: LogicAndNetwork
        connection_type: original
        logic_id: gen
        network_id: network1
    - assert:
        status: 2\d{2}
    - put: /systemmanager/connections/aggre_network1
      body:
        id: aggre_network1
        type: LogicAndNetwork
        connection_type: original
        logic_id: aggre
        network_id: network1
    - assert:
        status: 2\d{2}

- macro: delete_comp
  scenario:
    - pipeline:
      - get: /systemmanager/components
      - comps
      - delete_component
      - rest_request

- macro: delete_conn
  scenario:
    - pipeline:
      - get: /systemmanager/connections
      - conns
      - delete_connection
      - rest_request

- macro: verbose_off
  scenario:
    - put: /network0/settings/verbose_event/port
      body: "false"
    - put: /network0/settings/verbose_event/link
      body: "false"
    - put: /network1/settings/verbose_event/port
      body: "false"
    - put: /network1/settings/verbose_event/link
      body: "false"

- macro: create_topo
  description: Creates topology
  usage: create_topo <topo_type> 
  scenario:
    - pipeline:
      - topo_{0}: [node]
      - create_node
      - rest_request
    - pipeline:
      - topo_{0}: [port]
      - create_port
      - rest_request
    - pipeline:
      - topo_{0}: [eport]
      - create_port
      - rest_request
    - pipeline:
      - topo_{0}: [link]
      - create_link
      - rest_request

- macro: delete_topo 
  scenario:
    - pipeline:
      - get: /network1/topology/links
      - links
      - delete_link
      - rest_request
    - pipeline: 
      - get: /network1/topology/nodes
      - nodes
      - delete_node 
      - rest_request

- macro: show_nodes 
  scenario:
    - pipeline:
      - get: /network1/topology/nodes
      - nodes
      - filter_print

- macro: show_ports 
  scenario:
    - pipeline:
      - get: /network1/topology/nodes
      - ports
      - filter_print

- macro: show_links 
  scenario:
    - pipeline:
      - get: /network1/topology/links
      - links
      - filter_print

- macro: show_comps
  scenario:
    - pipeline:
      - get: /systemmanager/components
      - comps
      - fancy_comp
      - print

- macro: show_conns
  scenario:
    - pipeline:
      - get: /systemmanager/connections
      - conns
      - fancy_conn
      - print 

- macro: show_flows
  scenario:
    - pipeline:
      - get: /network1/flows
      - flows
      - filter_print

- macro: show_flow
  scenario:
    - get: /network1/flows/{0}

- macro: delete_flows
  scenario:
    - pipeline:
      - get: /network1/flows
      - flows
      -  delete_flow

- macro: create_all
  scenario:
    - macros: [create_comp, create_conn, create_topo ring]

- macro: delete_all
  scenario:
    - macros: [delete_topo, delete_conn, delete_comp]

# Generator.java manipulation
# NOTE: You need to make an instance of Generator before using this macro.
- macro: start
  scenario:
    - put: /gen/env
      body:
        nodePrefix: node
        portPrefix: port
        driverPrefix: gen
        nodeRange: [1, 10]
        portRange: [11, 20]  # eports
        samplePolicy: RANDOM_NODE_PORT
        dump: false 
    - assert:
        status: 2\d{{2}}
    - put: /gen/control
      body:
        frequency: _int{0}  # in msec 
        generating: true
        payload: "Hello OdenOS!"
        maxSeqno: 65535 
    - assert:
        status: 2\d{{2}}

- macro: stats
  description: Prints out statistics at Generator
  usage: stats
  scenario:
    - get: /gen/stats

- macro: stop
  description: Stops InPacket generation at Generator
  usage: stop
  scenario:
    - put: /gen/control
      body:
        generating: false 
    - assert:
        status: 2\d{2}

- macro: sleep
  scenario:
    - echo: "bug ticket #262"
    - sleep: _int{}

# === Create components, connections and ring topo, then initiate CLI ===
# NOTE: The following is executed when clio is initiated with this file
# without -p option.

- macros: 
  - create_comp
  - create_conn
  - create_topo ring  # The 1st arg can be ring, mesh or linear
- cli

