#!mako

<%
conf = """

# OdenOS components
components:
  network0: Network
  network01: Network
  network02: Network
  lsw01: LearningSwitch
  lsw02: LearningSwitch
  slicer: Slicer
  driver: Generator

# Connections among OdenOS components
connections:
  slicer_nw00: [original, slicer, network0]
  slicer_nw01: [sliver, slicer, network01]
  slicer_nw02: [sliver, slicer, network02]
  lsw_nw01: [sliver, lsw01, network01]
  lsw_nw02: [sliver, lsw02, network02]

# Network nodes (simulated by DummyDriver)
nodes:
  node001: [port0011, port0012, port0013]
  node002: [port0021, port0022, port0023, port0024]
  node003: [port0031, port0032, port0033]

# Links among the nodes
links:
  link0012: [[node001, port0012], [node002, port0021]]
  link0021: [[node002, port0021], [node001, port0012]]
  link0023: [[node002, port0022], [node003, port0031]]
  link0032: [[node003, port0031], [node002, port0022]]

# PacketIn
in_packets:
  - {node: node001, port: port0011, dl_src: "00:11:22:33:44:55", dl_dst: "66:77:88:99:00:11"}
  - {node: node003, port: port0032, dl_src: "66:77:88:99:00:11", dl_dst: "00:11:22:33:44:55"}
  - {node: node001, port: port0011, dl_src: "00:11:22:33:44:55", dl_dst: "66:77:88:99:00:11"}
  - {node: node002, port: port0023, dl_src: "22:33:44:55:66:77", dl_dst: "66:77:88:99:00:11"}

"""
%>

<%!
import yaml
import re
pattern_node = re.compile('^node(\d+)$')
pattern_port = re.compile('^port(\d+)$')
get_phy_id_node = lambda node: pattern_node.match(node).group(1)
get_phy_id_port = lambda node, port: '{}@{}'.format(pattern_port.match(port).group(1), get_phy_id_node(node))
%>
<%
conf = yaml.load(conf)
%>

# create NetworkComponent , Aggregator , and other Component
- get: /systemmanager/component_managers
% for id, type in iter(conf['components'].items()):
- put: /systemmanager/components/${id}
  body:
    type: ${type} 
    id: ${id}
    cm_id: romgr1
% endfor
- get: /systemmanager/components

# connect Components
% for id, conn in iter(conf['connections'].items()):
<%
     conn_type = conn[0]
     logic_id = conn[1]
     network_id = conn[2]
%> 
- put: /systemmanager/connections/${id}
  body:
    id: ${id}
    type: LogicAndNetwork
    connection_type: ${conn_type}
    logic_id: ${logic_id} 
    network_id: ${network_id}
% endfor
- get: /systemmanager/connections

# make Topology
- sleep: 1 
% for node in conf['nodes']:
<%
     physical_id = get_phy_id_node(node)
%>
- put: /network0/topology/nodes/${node}
  body:
    node_id: ${node}
    type: Node
    version: "0"
    ports: {}
    attributes: {"oper_status":"UP", "physical_id":"${physical_id}", "vendor":"VENDOR_A"}
% endfor

- sleep: 1

% for node, ports in iter(conf['nodes'].items()):
    % for port in ports: 
<%
     physical_id = get_phy_id_port(node, port)
%>
- put: /network0/topology/nodes/${node}/ports/${port}
  body:
    type: Port
    version: "0"
    node_id: ${node}
    port_id: ${port}
    out_link: null
    in_link: null
    attributes:
      physical_id: "${physical_id}"
    % endfor
% endfor

- sleep: 1

% for link in conf['links']:
<%
      t = conf['links'][link]
      src_node = t[0][0]
      src_port = t[0][1]
      dst_node = t[1][0]
      dst_port = t[1][1]
%>
- put: /network0/topology/links/${link}
  body:
    type: Link
    version: "0"
    link_id: ${link}
    src_node: ${src_node}
    src_port: ${src_port}
    dst_node: ${dst_node}
    dst_port: ${dst_port}
    attributes: {}
% endfor

#- echo: "------ original network -------" 
#- get: /systemmanager/components/network0/topology

#- echo: "------ aggregated network -------" 
#- get: /systemmanager/components/network1/topology

# Slicer condition
- put: /slicer/settings/slice_condition_table/40/conditions/sliceconditon1
  body:
    id: sliceconditon1
    type: BasicSliceCondition
    connection: slicer_nw01
    in_node: node001
    in_port: port0011
- put: /slicer/settings/slice_condition_table/40/conditions/sliceconditon2
  body:
    id: sliceconditon2
    type: BasicSliceCondition
    connection: slicer_nw01
    in_node: node003
    in_port: port0032
- put: /slicer/settings/slice_condition_table/50
  body:
    - id: sliceconditon3
      type: BasicSliceCondition
      connection: slicer_nw02
      in_node: node001
      in_port: port0013
    - id: sliceconditon4
      type: BasicSliceCondition
      connection: slicer_nw02
      in_node: node003
      in_port: port0033
 
- echo: "------ POST InPacket -------" 
% for in_packet in conf['in_packets']:
<%
     node = in_packet['node']
     port = in_packet['port']
     dl_src = in_packet['dl_src']
     dl_dst = in_packet['dl_dst']
%>
- post: /network0/packets/in
  body:
    type: OFPInPacket
    node: ${node}
    port: ${port}
    header:
      type: OFPFlowMatch
      in_node: ${node}
      in_port: ${port}
      dl_src: ${dl_src}
      dl_dst: ${dl_dst}
    data: ABCDEFGHIJKLMN
    attributes: {}
% endfor

#- sleep: 5
- echo:  "------ Get InPacket(network0) -------" 
- get: /network0/packets/in 

#- sleep: 5
- echo: "------ Get OutPacket(network0) -------" 
- get: /network0/packets/out 

- sleep: 3
- echo: "---------------- flow (network0)-------------------"
- get: /systemmanager/components/network0/flows


