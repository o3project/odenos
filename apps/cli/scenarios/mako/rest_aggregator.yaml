#!mako

# This script is a YAML&MAKO version of "rest_aggregator.sh"
#
# [LearningSwitch] ---- (network1) ---- [Aggregator] ----  (network0) ---- [DummyDriver] 

<%
# OdenOS components
components = {
    'network0': 'Network',
    'network1': 'Network',
    'lsw': 'LearningSwitch',
    'aggre': 'Aggregator',
    'driver': 'DummyDriver'
}

# Connections among OdenOS components
connections = {
    'aggregated': ('aggregated', 'aggre', 'network1'),
    'original': ('original', 'aggre', 'network0'),
    'driver': ('original', 'driver', 'network0'),
    'lsw': ('original', 'lsw', 'network1')
}

# Network nodes (simulated by DummyDriver)
nodes = {
    'node001': ('port0011', 'port0012', 'port0013'), 
    'node002': ('port0021', 'port0022', 'port0023', 'port0024'),
    'node003': ('port0031', 'port0032', 'port0033')
}

# Links among the nodes
#                                                  [port0023]
#   [port0011](node001)[port0012] -----  [port0021](node002)[port0022] ----  [port0031](node003)[port0032]
#             [port0013]                           [port0024]                          [port0033]
#                  |                                                                       |
#                  +-----------------------------------------------------------------------+
links = {
    'link0012': (('node001', 'port0012'), ('node002', 'port0021')),
    'link0021': (('node002', 'port0021'), ('node001', 'port0012')),
    'link0023': (('node002', 'port0022'), ('node003', 'port0031')),
    'link0032': (('node003', 'port0031'), ('node002', 'port0022')),
    'link0013': (('node001', 'port0013'), ('node003', 'port0033')),
    'link0031': (('node003', 'port0033'), ('node001', 'port0013'))
}

# PacketIn
in_packets = (
    {'node': 'node001', 'port': 'port0011', 'dl_src': '00:11:22:33:44:55', 'dl_dst': '66:77:88:99:00:11'},
    {'node': 'node003', 'port': 'port0032', 'dl_src': '66:77:88:99:00:11', 'dl_dst': '00:11:22:33:44:55'},
    {'node': 'node001', 'port': 'port0011', 'dl_src': '00:11:22:33:44:55', 'dl_dst': '66:77:88:99:00:11'},
    {'node': 'node002', 'port': 'port0023', 'dl_src': '22:33:44:55:66:77', 'dl_dst': '66:77:88:99:00:11'}
)
%>

# create NetworkComponent , Aggregator , and other Component
- get: /systemmanager/component_managers
% for id, type in iter(components.items()):
- put: /systemmanager/components/${id}
  body:
    type: ${type} 
    id: ${id}
    cm_id: romgr1
% endfor
- get: /systemmanager/components

# connect Components
% for id, conn in iter(connections.items()):
<%
     conn_type = conn[0]
     logic_id = conn[1]
     network_id = conn[2]
%> 
- put: /systemmanager/connections/${id}
  body:
    id: ${id}
    type: LogicAndNetwork
    connection_type: ${conn_type}
    logic_id: ${logic_id} 
    network_id: ${network_id}
% endfor
- get: /systemmanager/connections

# make Topology
- sleep: 1 
<%!
import re
pattern_node = re.compile('^node(\d+)$')
pattern_port = re.compile('^port(\d+)$')
get_phy_id_node = lambda node: pattern_node.match(node).group(1)
get_phy_id_port = lambda node, port: '{}@{}'.format(pattern_port.match(port).group(1), get_phy_id_node(node))
%>
% for node in nodes:
<%
     physical_id = get_phy_id_node(node)
%>
- put: /network0/topology/nodes/${node}
  body:
    node_id: ${node}
    type: Node
    version: "0"
    ports: {}
    attributes: {"oper_status":"UP", "physical_id":"${physical_id}", "vendor":"VENDOR_A"}
% endfor

- sleep: 1

% for node, ports in iter(nodes.items()):
    % for port in ports: 
<%
     physical_id = get_phy_id_port(node, port)
%>
- put: /network0/topology/nodes/${node}/ports/${port}
  body:
    type: Port
    version: "0"
    node_id: ${node}
    port_id: ${port}
    out_link: null
    in_link: null
    attributes:
      physical_id: "${physical_id}"
    % endfor
% endfor

- sleep: 1

% for link in links:
<%
      src_node = links[link][0][0]
      src_port = links[link][0][1]
      dst_node = links[link][1][0]
      dst_port = links[link][1][1]
%>
- put: /network0/topology/links/${link}
  body:
    type: Link
    version: "0"
    link_id: ${link}
    src_node: ${src_node}
    src_port: ${src_port}
    dst_node: ${dst_node}
    dst_port: ${dst_port}
    attributes: {}
% endfor

- echo: "------ original network -------" 
- get: /systemmanager/components/network0/topology

- echo: "------ aggregated network -------" 
- get: /systemmanager/components/network1/topology

- echo: "------ POST InPacket -------" 
% for in_packet in in_packets:
<%
     node = in_packet['node']
     port = in_packet['port']
     dl_src = in_packet['dl_src']
     dl_dst = in_packet['dl_dst']
%>
- post: /network0/packets/in
  body:
    type: OFPInPacket
    node: ${node}
    port: ${port}
    header:
      type: OFPFlowMatch
      in_node: ${node}
      in_port: ${port}
      dl_src: ${dl_src}
      dl_dst: ${dl_dst}
    data: ABCDEFGHIJKLMN
    attributes: {}
% endfor

#- sleep: 5
- echo:  "------ Get InPacket(network0) -------" 
- get: /network0/packets/in 
- echo: "------ Get InPacket(network1) -------" 
- get: /network1/packets/in 

#- sleep: 5
- echo: "------ Get OutPacket(network0) -------" 
- get: /network0/packets/out 
- echo: "------ Get OutPacket(network1) -------" 
- get: /network1/packets/out 

- sleep: 5
- echo: "---------------- flow (network0)-------------------"
- get: /systemmanager/components/network0/flows
- echo: "---------------- flow (network1)-------------------"
- get: /systemmanager/components/network1/flows

# print results
- echo: "---------------- Results -------------------"
- get: /systemmanager/components
- get: /systemmanager/connections
- get: /systemmanager/components/network0/packets
- get: /systemmanager/components/network1/packets

# get topology
- get: /network0/topology/physical_nodes/001
- get: /network0/topology/physical_ports/0011@001

# delete topology
- sleep: 1
% for link in links:
- delete: /network0/topology/links/${link}
% endfor

- sleep: 1
- delete: /network0/topology/physical_ports/0011@001
% for node, ports in iter(nodes.items()):
    % for port in ports:
- delete: /network0/topology/nodes/${node}/ports/${port}
    % endfor
% endfor

- sleep: 1
- delete: /network0/topology/nodes/node001
- delete: /network0/topology/nodes/node002
- delete: /network0/topology/physical_nodes/003
- sleep: 1

# delete network
- sleep: 3
% for conn in connections:
- delete: /systemmanager/connections/${conn}
% endfor
% for comp in components:
- delete: /systemmanager/components/${comp}
% endfor
