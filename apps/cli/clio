#!/usr/bin/env python3.4

# Copyright 2015 NEC Corporation.                                          #
#                                                                          #
# Licensed under the Apache License, Version 2.0 (the "License");          #
# you may not use this file except in compliance with the License.         #
# You may obtain a copy of the License at                                  #
#                                                                          #
#   http://www.apache.org/licenses/LICENSE-2.0                             #
#                                                                          #
# Unless required by applicable law or agreed to in writing, software      #
# distributed under the License is distributed on an "AS IS" BASIS,        #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and      #
# limitations under the License.                                           #

import urllib
import re
import argparse
import sys
from time import sleep, time
from datetime import datetime
from mako.template import Template
import readline  # @UnresolvedImport
from io import StringIO
import traceback
import pydoc
from difflib import unified_diff
import subprocess

from util import substitute, dict2yaml 
from rest import build_send_request_function
from coroutine import do_pipeline
from env import *

VERSION = "1.0.0"

HELP = """CLIO (ver. {}) {} mode
working with {} at {}

command  explanation
-------- ----------------------------------------------
q        quit
t        terminate
u        update schema
l FILE   load presets from FILE 
a        show add-on list
a NAMES  show definitions of add-on NAMES (filter/transform/fancy/producer)
m        show macros list
m NAME   show definition of macro NAME
v        toggle verbosity (verbose/normal/quiet mode)
s        toggle step-by-step (step-by-step execution)
c        clear history
h        show this help

Tab for auto complete

---------------------------------------------------------------
CRUD operations guideline (post, get, put, delete)
>>> get /path   ==> shows the response in YAML.
>>> put /path:  ==> You enter REST body in YAML.
>>> put /path*  ==> You enter REST body in YAML.
                    '*' is same as ':', but "get before put" 
                    for REST body auto-complete 
>>> put /path?  ==> enter URL params in YAML.

Ctrl-C to interrupt CRUD operation

""".format(VERSION, EDITING_MODE, TYPE, URL)


SEP = '----------------------------------------------------------------------------'
SEP2 = '============================================================================'

cmd_pattern = re.compile('^('+'|'.join(CMD)+')\s+([\.@\-:/\w]+)$|^(produce)\s+(.+)$')
default_status_pattern = re.compile('2\d{2}')

step_by_step = False

def print_sep(message=None, sep=1):
    """
    Print seperator
    """
    if sep == 2:
        sep = SEP2
    else:
        sep = SEP
    if message:
        print(sep[:5], message, sep[7+len(message):])
    else:
        print(sep)

is_brackets = lambda key: key.startswith('<') and key.endswith('>')
is_valid = lambda cmd, schema: METHODS[cmd] in schema or len(schema) == 0 

def _flatten(cmd, options, path, schema):
    for k in schema:
        #if k == '_tail' or is_brackets(k):
        if k == '_tail':
            if is_valid(cmd, schema['_tail']):
                options.append(path)
            else:  # invalid operation
                pass 
        else:
            _path = copy.deepcopy(path)
            _path.append(k)
            _flatten(cmd, options, _path, schema[k])

def flatten(cmd, path, schema):
    options = []
    parent = '{} /'.format(cmd)
    if len(path) > 1:
        parent = '{} /{}/'.format(cmd, '/'.join(path[:-1]))
    for k in schema:
        #if k == '_tail' or is_brackets(k):
        if k == '_tail':
            if is_valid(cmd, schema['_tail']):
                options.append([])
            else:  # invalid operation
                pass 
        else:
            _path = [k]
            _flatten(cmd, options, _path, schema[k])
    flattend = []
    for opt in options:
        child = '/'.join(opt)
        if len(path) == 0:
            flattend.append(parent+child)
        elif child.startswith(path[-1]):
            flattend.append(parent+child)
    return flattend

readline.parse_and_bind('tab: complete')
readline.parse_and_bind('set editing-mode {}'.format(EDITING_MODE))
readline.set_completer_delims('')
readline.set_history_length(HISTORY_LENGTH)

def completer(text, state):
    try:
        """
        Completer for readline module
        """
        options = None
        macro_list = MACROS.keys()
        if len(text) == 0:
            options = [x for x in CMD]
            options.append('produce')
            options.extend(macro_list)
        else:
            text = text.split(' ')
            cmd = text[0]
            if len(text) > 1:
                args = text[1]
                if cmd == 'produce':
                    options = [cmd+' '+x for x in PRODUCERS.keys() if x.startswith(args)]
                elif cmd in macro_list:
                    options = [cmd] 
                else:
                    if cmd in CMD:
                        t = args.split('/')[1:]
                        schema = SCHEMA 
                        path = []
                        len_t = len(t)
                        if len_t > 0:
                            i = 0
                            while i < len_t:
                                node = t[i]
                                i += 1
                                keys = schema.keys()
                                brackets = False
                                b_key = None
                                for k in keys:
                                    brackets = is_brackets(k)
                                    if brackets:
                                        b_key = k
                                        break
                                if node in keys:
                                    schema = schema[node]
                                    path.append(node)
                                    if i == len_t:
                                        path.append('')
                                elif brackets:  # <...> 
                                    if node == '':
                                        pass
                                    else:
                                        schema = schema[b_key]  # bracket key
                                        path.append(node)
                                else:
                                    path.append(node)
                            options = flatten(cmd, path, schema)
                        else:
                            options = flatten(cmd, [], schema)
            else:
                #if cmd == 'generate':
                if cmd == 'produce':
                    options = ['produce '+x for x in PRODUCERS.keys()]
                elif cmd in macro_list:
                    options = [cmd]
                else:
                    options = [x+' /' for x in CMD if x.startswith(cmd)]
                    if 'produce '.startswith(cmd):
                        options.append('produce ')
                    for s in macro_list:
                        if s.startswith(cmd):
                            options.append(s+' ')
        if state < len(options):
            return options[state]
        else:
            return None
    except:
        traceback.print_exc()

readline.set_completer(completer)


def parse_cli(cmd):
    ope = None
    path = None
    g = cmd_pattern.match(cmd)
    if g:
        l = g.lastindex
        if l == 1:
            ope = g.group(1)
        elif l == 2:
            ope = g.group(1)
            path = g.group(2)
        elif l > 2:
            ope = g.group(3)
            path = g.group(4) 
    return (ope, path)

def do_macro(args, rest, macro):
    m = macro.split()
    if len(m) > 1:
        scenario = MACROS[m[0]]['scenario']
        macro_args = m[1:]
        scenario = substitute(scenario, *macro_args) 
    else:
        scenario = MACROS[m[0]]['scenario']
    do(args, rest, scenario, macro) 

def cli(args, rest, tag=None):
    """
    CLI
    """

    global step_by_step

    print('')
    print('type "h" for help')
    print('type "q" to quit')
    print('')
    if tag:
        print('(CLI tag: {})'.format(str(tag)))
    
    if os.path.isfile(HISTORY):
        readline.read_history_file(HISTORY)
    else:
        open(HISTORY, 'a').close()

    if 'update_schema' in init and init['update_schema']:
        args.update_schema = True 

    if args.preset:
        load_preset(args.preset)

    global SCHEMA
    if args.update_schema:
        SCHEMA = update_schema(args, rest, init['schema'], BOOTSTRAP)
    
    
    while True:

        cmd = input('>>> ').strip(' \t')
       
        if cmd == '':
            pass
        elif cmd == 's':
            if step_by_step:
                step_by_step = False
                print('step-by-step mode off')
            else:
                step_by_step = True
                print('step-by-step mode on')
        elif cmd == 'q':
            readline.write_history_file(HISTORY)
            break
        elif cmd == 'u':
            SCHEMA = update_schema(args, rest, init['schema'], BOOTSTRAP)
        elif cmd == 'v':  # normal => verbose => quiet => normal
            if args.verbose:
                args.verbose = False
                args.quiet = True 
                print('quiet mode')
            elif args.quiet:
                args.verbose = False 
                args.quiet = False
                print('normal mode')
            else:
                args.verbose = True 
                args.quiet = False
                print('verbose mode')
        elif cmd == 'c':
            readline.clear_history()
        elif cmd == 'h':
            pydoc.pager(HELP)
        elif cmd == 't':
            print("CLIO terminated")
            if tag:
                print("Use this tag to resume: {}".format(str(tag)))
            readline.write_history_file(HISTORY)
            sys.exit(0)
        
        elif cmd.split()[0] in MACROS:  # macro execution
            do_macro(args, rest, cmd)

        elif cmd.startswith('l '):  # loads preset
            name = cmd.strip(' \t').split()
            if len(name) > 1:
                args.preset = name[1]
                load_preset(args.preset)
            else:
                print("[Error] file name unspecified")

        elif cmd == 'a':  # add-on
            print('--- filters ---')
            print("   ".join(FILTERS.keys()))
            print('--- transforms ---')
            print("   ".join(TRANSFORMS.keys()))
            print('--- fancy outputs ---')
            print("   ".join(FANCY_OUTPUTS.keys()))
            print('--- producers ---')
            print("   ".join(PRODUCERS.keys()))
        elif cmd.startswith('a '):  # add-on list
            for f in cmd.strip(' \t').split()[1:]:
                if f in FILTERS:
                    print('--- filter: {} ---'.format(f))
                    print(dict2yaml(FILTERS[f]))
                if f in TRANSFORMS:
                    print('--- transform: {} ---'.format(f))
                    print(dict2yaml(TRANSFORMS[f]))
                if f in FANCY_OUTPUTS:
                    print('--- fancy outputs: {} ---'.format(f))
                    print(dict2yaml(FANCY_OUTPUTS[f]))
                if f in PRODUCERS:
                    print('--- producers: {} ---'.format(f))
                    print(PRODUCERS[f].__doc__)
                    print(dict2yaml(PRODUCERS[f].__dict__))

        elif cmd == 'm':  # macro list
            print('--- macros ---')
            print("   ".join(MACROS.keys()))

        elif cmd.startswith('m '):  # macro
            for f in cmd.strip(' \t').split()[1:]:
                if f in MACROS:
                    print('--- macro: {} ---'.format(f))
                    print(dict2yaml(MACROS[f]))

        else: # REST transaction or produce
            
            req_data = None 

            # Pipeline from CLI input
            pipeline = None
            if '|' in cmd: 
                pipeline = [x.strip(' \t\n\r') for x in cmd.split('|')]
                cmd = pipeline[0] 

            # REST-related parameters
            body = None
            params = None
            has_body = False
            has_params = False
            get_before_put = False
            if cmd.endswith(':'):
                has_body = True
            elif cmd.endswith('?'):
                has_params = True
            elif cmd.endswith('*'):
                has_body = True
                get_before_put = True

            # Obtains REST params or body from CLI input
            if has_body or has_params:
                cmd = cmd.rstrip(':?*')
                getbuf = None
                if get_before_put:
                    ope, path = parse_cli(cmd)
                    if ope in METHODS:
                        method = 'GET'
                        response, res_body, out = rest(method, path, params, body, verbose=args.verbose, print_json=args.json)
                        getbuf = StringIO()
                        getbuf.write(dict2yaml(res_body))
                        getbuf.seek(0)
                    else:
                        print("[Error] Illegal operation")
                        continue
                buf = StringIO() 
                while True:
                    if getbuf: 
                        readline.set_startup_hook(lambda: readline.insert_text(getbuf.readline().rstrip('\n')))
                    s = input('...   ').strip(' \t')
                    if s == '':
                        break
                    else:
                        buf.write(s+'\n')
                try:
                    if has_body:
                        body = yaml.load(buf.getvalue())
                    elif has_params:
                        params = urllib.parse.urlencode(yaml.load(buf.getvalue()))
                except:
                    print('[Error] Illegal body')
                    cmd = None
                finally:
                    buf.close()
                    if getbuf:
                        getbuf.close()
                        readline.set_startup_hook()

            # Command execution
            if cmd:
                ope, path = parse_cli(cmd)
                if ope == 'produce' and pipeline:
                    try:
                        pro = path.split()
                        producer = pro[0]
                        args_ = None 
                        if len(pro) > 1:
                            args_ = [x for x in pro[1:]]
                        else:
                            raise Exception('producer requires arguments')
                        pro_dict = {}
                        pro_dict[producer] = args_
                        req_data = [pro_dict]
                        req_data.extend(pipeline[1:])
                        do_pipeline(args, rest, req_data)
                    except KeyboardInterrupt:
                        print("")
                elif ope in METHODS:
                    try:
                        rest_dict = {}
                        rest_dict[ope] = path
                        if body:
                            rest_dict['body'] = body
                        if params:
                            rest_dict['params'] = params
                        req_data = [rest_dict]
                        if pipeline:
                            req_data.extend(pipeline[1:])
                        else:
                            req_data.extend(['rest_pager'])
                        do_pipeline(args, rest, req_data)
                    except KeyboardInterrupt:
                        print("")
                else:
                    print('[Error] Illegal command')


def update_schema(args, rest, original_schema, bootstrap):
    """
    Updates schema
    """
    schema = copy.deepcopy(original_schema)
    response, res_body, out = rest(method='GET', path=bootstrap, params=None, body=None)
    print('updating schema...')
    print('status: {}'.format(response.status))
    print('reason: {}'.format(response.reason))
    generated_schema = schema['bootstrap']
    for comp in res_body:
        type_ = res_body[comp]['type']
        if type_ in schema:
            if args.supress:
                _type_ = '<' + type_ + '>'
                if _type_ in generated_schema:
                    pass
                else:
                    generated_schema[_type_] = schema[type_]
            else:
                generated_schema[comp] = schema[type_]
    return generated_schema

def load_preset(filename):
    """
    Loads filter/transform definition file
    """
    with open(filename, 'r') as f:
        l = yaml.load(f.read())
        print('CLIO (CLI for OdenOS)')
        print('')
        print('loading filters/transforms/producers/macros from "{}"...'.format(filename))
        for req_data in l:
            if 'filter' in req_data:
                set_filter(req_data)
            elif 'transform' in req_data:
                set_transform(req_data)
            elif 'producer' in req_data:
                set_producer(req_data)
            elif 'fancy' in req_data:
                set_fancy(req_data)
            elif 'macro' in req_data:
                set_macro(req_data)

def do(args, rest, scenario, scenario_name=None):
    """
    Executes scenario
    """
    # results
    status_checked = [0, 0, ':-)']  # [pass, fail, smiley]
    body_checked = [0, 0, ':-)']  # [pass, fail, smiley]]
    status_all = [0, 0, ':-)']  # [pass, fail, smiley]]

    res_body = None
    tag = args.tag 
    resume = True

    global step_by_step

    if tag:
        resume = False

    start_datetime = str(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    start_time = time()
    
    response = None
    
    for req_data in scenario:
        
        if tag: 
            if 'cli' in req_data and isinstance(req_data, dict) and 'tag' in req_data['cli']:
                if tag == req_data['cli']['tag']:
                    resume = True

        if resume:
            if 'filter' in req_data:
                set_filter(req_data)
            elif 'transform' in req_data:
                set_transform(req_data)
            elif 'fancy' in req_data:
                set_fancy(req_data)
            elif 'macro' in req_data:
                set_macro(req_data)
            elif 'producer' in req_data:
                set_producer(req_data)
            else:
                try:
                    if not args.quiet:
                        if scenario_name:
                            print_sep(scenario_name, sep=2)
                        else:
                            print_sep()
                    if 'sleep' in req_data:
                        sleep_ = req_data['sleep']
                        sleep(sleep_)
                        print('sleep {}'.format(str(sleep_)))
                    elif 'echo' in req_data:
                        print(req_data['echo'])
                    elif 'macros' in req_data:
                        for m in req_data['macros']:
                            macro = m.split()
                            if macro[0] in MACROS:  # macro execution
                                do_macro(args, rest, m)
                            else:
                                raise Exception('Unidentified macro')
                                sys.exit(1)
                    elif 'shell' in req_data:
                        for cmd in req_data['shell']:
                            print(subprocess.check_output(cmd.split()))
                    elif 'cli' in req_data:
                        cli_tag = None
                        if isinstance(req_data, dict):
                            cli_options = req_data['cli']
                            if 'update_schema' in cli_options:
                                args.update_schema = cli_options['update_schema']
                            if 'tag' in cli_options:
                                cli_tag = cli_options['tag']
                        cli(args, rest, cli_tag)
                    elif 'pipeline' in req_data:
                        do_pipeline(args, rest, req_data['pipeline'], status_all)
                    # TODO: assert feature needs rework
                    elif 'assert' in req_data:
                        assert_ = req_data['assert']
                        status_pattern = None
                        expected = None
                        if 'status' in assert_:
                            status_pattern = assert_['status']
                        if 'body' in assert_:
                            expected = assert_['body']
                        status = response['status']
                        if status_pattern:  # status checked
                            try:
                                assert(re.match(status_pattern, status))
                                print('*** OK (status)')
                                status_checked[0] += 1
                            except:
                                print('*** FAIL (status): status code {} does not match "{}"'.format(status, status_pattern))
                                status_checked[1] += 1
                        if expected:
                            try:
                                assert(cmp(res_body, expected) == 0)
                                print('*** OK (body)')
                                body_checked[0] += 1
                            except:
                                print('*** FAIL (body): body unmatch')
                                diff = unified_diff(dict2yaml(res_body).split('\n'), dict2yaml(expected).split('\n'), 'body', 'expected')
                                for l in diff:
                                    print(l)
                                body_checked[1] += 1
                    else:
                        rest_args = get_crud(req_data)
                        response, res_body, out = rest(*rest_args, verbose=args.verbose, print_json=args.json)
                        if not args.quiet:
                            print(out, end='')
                        try:
                            assert(re.match(default_status_pattern, response['status']))
                            status_all[0] += 1
                        except:
                            status_all[1] += 1
                except KeyboardInterrupt:
                    print('')
                    #sys.exit(0)

        if step_by_step:
            print('[Suspended] Enter to continue...')
            suspend = input('>>> (press enter or q)')
            print ('')
            if suspend == 'q':
                step_by_step = False

    print("")
    if args.verbose:
        finish_time = time()
        if status_all[1] > 0:
            status_all[2] = 'XXX'
        if status_checked[1] > 0:
            status_checked[2] = 'XXX'
        if body_checked[1] > 0:
            body_checked[2] = 'XXX'
        if status_checked[0] == status_checked[1] == 0: status_checked[2] = ''
        if status_all[0] == status_all[1] == 0: status_all[2] = ''
        if body_checked[0] == body_checked[1] == 0: body_checked[2] = ''

        print_sep('SUMMARY')
        print('start time: {}'.format(start_datetime))
        print('elapsed time: {0:.2f} sec'.format(finish_time - start_time))
        print('')
        print('check              passed   failed   kudos')
        print('------------------ -------- -------- -----')
        print('status (checked)   {0:>8}{1:>9}{2:>6}'.format(*status_checked))
        print('status (all)       {0:>8}{1:>9}{2:>6}'.format(*status_all))
        print('body (checked)     {0:>8}{1:>9}{2:>6}'.format(*body_checked))
            

# Converts the clistyle input into YAML
cli_pattern = re.compile('^(\w+)$|^(\w+)\s+(/[/\w]+)([:\?])?$|^(\w+)\s+(\w[\w\s]*)')
comment_space_pattern = re.compile('^#.*$|^\s+$')
tab = '  '

def to_yaml(scenario):
    """
    Converts the clistyle input into YAML
    """
    strbuf = StringIO()
    _scenario = scenario.split('\n') 
    for s in _scenario:
        m = cli_pattern.match(s)
        if m:
            lastindex = m.lastindex
            if lastindex == 4:
                strbuf.write('- {}: {}\n'.format(m.group(2), m.group(3)))
                attr = m.group(4)
                if attr == ':':
                    strbuf.write('  body:\n')
                elif attr == '?':
                    strbuf.write('  params:\n')
            elif lastindex == 3:
                strbuf.write('- {}: {}\n'.format(m.group(2), m.group(3)))
            elif lastindex == 1:
                strbuf.write('- {}\n'.format(m.group(1)))
            elif lastindex == 6:
                strbuf.write('- {}: {}\n'.format(m.group(5), m.group(6)))
                print(strbuf.getvalue())

        else:
            if comment_space_pattern.match(s):
                strbuf.write('{}\n'.format(s))
            else:
                strbuf.write('{}{}\n'.format(tab, s))

    text = strbuf.getvalue()
    return text 

def generate_scenario(filename, mako, clistyle):
    """
    Generates a scenario in YAML format
    If mako, renders it by using mako before generating a scenario.
    if cli, converts the input into YAML
    """
    input_ = None
    #template = None
    with open(filename, 'r') as f:
        headline = f.readline()
        f.seek(0)
        g = re.match(r'^#(!mako)*(!cli)*\s*$', headline)
        if g:
            if g.group(1):
                mako = True
            elif g.group(2):
                clistyle = True
        if mako:
            input_ = Template(text=f.read()).render()
        else:
            input_ = f.read()
    if clistyle:
        input_ = to_yaml(input_)
    return yaml.load(input_)

def create_rest():
    if 'headers' in init:
        return build_send_request_function(URL, init['headers'])
    else:
        return build_send_request_function(URL)

if __name__ == '__main__':

    usage = 'usage: %prog [options] file'
    parser = argparse.ArgumentParser()
    parser.add_argument("scenario", nargs="?", help="scenario file written in either YAML or CLI style")
    parser.add_argument("-j", "--json", help="output data in JSON", action="store_true", default=False)
    parser.add_argument("-c", "--clistyle", help="data input in CLI style (include #!cli to omit this)", action="store_true", default=False)
    parser.add_argument("-v", "--verbose", help="output in verbose mode", action="store_true", default=False)
    parser.add_argument("-q", "--quiet", help="output in quiet mode", action="store_true", default=False)
    parser.add_argument("-u", "--update_schema", help="update schema", action="store_true", default=False)
    parser.add_argument("-m", "--mako", help="use Mako template engine (include #!mako to omit this)", action="store_true", default=False)
    parser.add_argument("-M", "--Mako", help="print out scenario file generated by Mako", action="store_true", default=False)
    parser.add_argument("-t", "--tag", help="resume scenario execution with this tag", type=int)
    parser.add_argument("-p", "--preset", help="load presets from a file", type=str)
    parser.add_argument("-s", "--supress", help="supress schema data", action="store_true", default=False)
    args = parser.parse_args()

    if 'load_preset' in init:
        load_preset(init['load_preset'])
    if not args.scenario: # CLI mode
        cli(args, create_rest())
    else: # Scenario mode
        if args.Mako:
            print(Template(filename=args.scenario).render())
            sys.exit(0)
        else:
            scenario = generate_scenario(filename=args.scenario, mako=args.mako, clistyle=args.clistyle)
            do(args, create_rest(), scenario, None)

