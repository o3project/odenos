clio (CLI for OdenOS)
=====================

Installation
------------

1. This script requires Python 3.4.

2. You need to have these packages pre-installed: httplib2, pyyaml, mako(optional) and readline.
$ sudo apt-get install python3-pip
$ sudo pip3 install httplib2
$ sudo pip3 install pyyaml
$ sudo pip3 install mako
$ sudo pip3 install readline

3. Build an artifact "generator".
$ mvn compile

Note that a maven artifact "odenos" must be installed into your local maven repo (i.e., ~/.m2, just run "mvn install") before building the generator.

4. Start OdenOS
$ odenos start -c apps/cli/odenos.conf

Optionally, you may set a clio init file name to 'CLIO_INIT' like this:
export CLIO_INIT=$HOME/somedir/init.yaml

clio requests can traverse a proxy. Just set a proxy address to http_proxy:
export http_proxy=(your proxy address)


CLI features
-------------

* Python-shell-like CLI
* Command auto-complete with pre-defined schema and history
* URL params and REST body as YAML data
* Command pipeline: producer | coroutine | coroutine | ... | consumer
* CLI add-on: filter, transform, producer and fancy_output as coroutines
* CLI macro definition
* Scenario execution

clio architecture:

         REST API Server (OdenOS)
               |
             HTTP
               |
    +----------------------+
    |                      |
    | CLIO core    [filter add-on]
    |              [transform add-on]
    |              [producer add-on]
    |              [fancy_output add-on]
    | [Macro]              |- - - - - +
    +----------------------+          |
               |                 [init.yaml] (incl. clio schema)
       Python-shell-like UI      [scenarios]]]]  <= You add these YAML files
               |                                    to enhance CLI features
           clio user


CLI usage example
-----------------

[Example 1] Create, read and delete a component

$ ./clio
loading filters/transforms/generators/macros from "preset.yaml"...

type "h" for help
type "q" to quit

updating schema...
status: 200
reason: OK
>>> get /systemmanager/components
{}
>>> put /systemmanager/components/lsw:
...   type: LearningSwitch
...   id: lsw
...   cm_id: romgr1
...
connection_types: ''
description: Learning Switch
id: lsw
state: running
super_type: LearningSwitch
type: LearningSwitch
>>> get /systemmanager/components
lsw:
  connection_types: ''
  description: Learning Switch
  id: lsw
  state: running
  super_type: LearningSwitch
  type: LearningSwitch
>>> delete /systemmanager/components/lsw

>>> get /systemmanager/components
{}

[Example 2] Search
>>> get /network0/topology/nodes?
...   attributes: physical_id=003
...
node003:
  attributes:
    oper_status: UP
    physical_id: '003'
    vendor: VENDOR_A
  node_id: node003
  ports:
    port0031:
      attributes:
        physical_id: 0031@003
      in_link: link0023
      node_id: node003
      out_link: link0032
      port_id: port0031
      type: Port
      version: '3'
    port0032:
      attributes:
        physical_id: 0032@003
      in_link: null
      node_id: node003
      out_link: null
      port_id: port0032
      type: Port
      version: '1'
    port0033:
      attributes:
        physical_id: 0033@003
      in_link: link0013
      node_id: node003
      out_link: link0031
      port_id: port0033
      type: Port
      version: '3'
  type: Node
  version: '1'

[Example 3] GET and PUT (update)

By adding '*' to the path, key-value pairs in the body is automaticlaly shown.
>>> put /gen/control*
...   frequency: 1000
...   generating: true
...   maxSeqno: 65535
...   payload: Hello OdenOS!
...

>>>


clio as a scenario runner
-------------------------

* clio loads a scenario file written in YAML, then executes the scenario one by one
* clio supports Python Mako template engine to auto-generate a scenario file in YAML
* The scenario file may include "- cli" to suspend the execution and to jump to CLI. Entering "q" quits CLI and then resumes the scenario execution. Optionally "- cli" may include "tag" that is used as a resume point when CLI is terminated.
* Two kinds of scenario formats are supported: pure YAML and CLI style.
* You can omit '-m' or '-c' option by including '#!mako' or '#!cli' or '#!mako!cli' in the scenario headline.
* You may include 'generators' to auto-generate a large network.


Sample clio scenarios
---------------------

To create a fat tree topology:
$ ./clio scenarios/topologies/fat_tree.yaml

To create 1000 nodes with a ring topology:
$ ./clio scenarios/topologies/1000nodes_ring.yaml


pipeline-oriented
-----------------

clio makes use of Python's pipeline support (i.e., generator):

[producer]--send()-->[filter]--send()-->[transform]--send()-->[consumer]
                     (yield)            (yield)               (yield)


Example1:
REST Response                                                 REST Request
    |                                                             ^
    V                                                             |
[producer]--send()-->[filter]--send()-->[transform]--send()-->[consumer]
                     (yield)            (yield)               (yield)


Example2:
producer.py                                   REST Request
    |                                             ^
    V                                             |
[producer]--send()-->-->[transform]--send()-->[consumer]
                        (yield)               (yield)


filters and transforms
----------------------

clio can filter REST response body data and generate new REST requests.

original REST request
    |send()
    V
filter (uses "dict_grep" function in util.py)
    |send()
    V
transform (uses "substitute" function in util.py)
    |send()
    V
generated REST request

Example:
>>> a nodes
--- filter: nodes ---
path: /node(\d+)/attributes/physical_id/
value: \d+
>>> a show_node
--- transform: show_node ---
read: /network1/topology/nodes/node{0}
>>> read /network1/topology/nodes | nodes
----- filter output ----------------------------------------------------------
/node003/ 003
/node002/ 002
/node001/ 001
>>> read /network1/topology/nodes | nodes | show_node
                 :
    (REST API output about node001, node002 and node003)
                 :

Note that 'nodes' is a series of regular expressions delimited by slash('/'), and 'show_node' is a REST request in YAML format with Python string format embedded({0}).


producer with filters and transforms
------------------------------------

clio provides "producer" that generate data.

producer.py
    |send()
    V
transform (uses "substitute" function in util.py)
    |send()
    V
generated REST requests

Example:
>>> produce topo_ring node | create_node | rest_request
>>> produce topo_ring port | create_port | rest_request
>>> produce topo_ring link | create_link | rest_request

Refer to "preset.yaml" and "producer.py".


Macro
-----

See macro section in "preset.yaml", which is self-explanatory.


clio config
-----------

Edit "init.yaml" that is a self-explanatory YAML file.


Working with Generator for OdenOS
---------------------------------

"generator" package is an OdenOS's sample application (OdenOS's driver) in this folder.

The package can generate a lot of InPakcet.

You can use clio to remote-control the component:
[clio] ----- REST Request ---> [Generator]

clio's default preset file ("preset.yaml") includes the following macros:
>>> start 1000  (sends InPacket every 1000 msec)
>>> stop (stops generating InPacket)
>>> stats (shows the statistics)


Usage
-----
To initiate CLI:
$ ./clio

To load and execute a scenario "preset.yaml":
$ ./clio preset.yaml

To initiate CLI with update_schema option:
$ ./clio -u

To initiate CLI with verbose option:
$ ./clio -v

To run a scenario "rest_test.cli" (clio CLI format):
$ ./clio -c rest_test.cli

To run a scenario "rest_test.yaml" (pure YAML format):
$ ./clio rest_test.yaml

To run the scenario and to show all the output in JSON:
$ ./clio -j rest_test.yaml

To run a scenario with Python script embedded (uses Mako):
$ ./clio -m rest_aggregator2.yaml

To show the auto-generated scenario:
$ ./clio -M rest_aggregator2.yaml

To resume a scenario starting from tag 1:
$ clio -m -t 1 rest_aggregator2.yaml

To load a preset file from a file:
$ clio -p some_preset_file.yaml

Note: include "#!mako" in the head line to omit -m option.

